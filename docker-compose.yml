services:
  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: .
      dockerfile: ci/server/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
    volumes:
      - ./output.txt:/root/output.txt
    restart: on-failure

  client1:
    build:
      context: .
      dockerfile: ci/client/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
    restart: on-failure
    volumes:
      - ./commands1.txt:/root/commands.txt
    command: [ "/root/client", "-queue", "commandQueue", "-input", "/root/commands.txt" ]

  client2:
    build:
      context: .
      dockerfile: ci/client/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
    restart: on-failure
    volumes:
      - ./commands2.txt:/root/commands.txt
    command: [ "/root/client", "-queue", "commandQueue", "-input", "/root/commands.txt" ]

  client3:
    build:
      context: .
      dockerfile: ci/client/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
    restart: on-failure
    volumes:
      - ./commands3.txt:/root/commands.txt
    command: [ "/root/client", "-queue", "commandQueue", "-input", "/root/commands.txt" ]
